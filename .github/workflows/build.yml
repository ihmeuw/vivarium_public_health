# -----------------------------------------------------------------------------
#   - invoked on push, pull_request, manual trigger, or schedule
#   - test under at least 3 versions of python
# -----------------------------------------------------------------------------
name: build
on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    defaults:
      run:
        shell: bash -le {0}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: get upstream branch name
        run: |
          if "${{ github.event_name == 'pull_request' }}" ; then
            echo "branch_name=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          else
            echo "branch_name=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi
      - name: Update pip
        run: |
          python -m pip install --upgrade pip
      - name: Install dependencies
        run: |
          pip install .[dev]
          git checkout ${branch_name}
      - name: check for upstream branch
        run: |
          vivarium_branch_name='main'
          branch_name_to_check=${branch_name}
          iterations=0
          while [ "$branch_name_to_check" != "$vivarium_branch_name" ]
          do
            echo "Checking for vivarium branch: ${branch_name_to_check}"
            if [ $iterations -gt 20 ]; then
              echo "Could not find upstream branch"
              exit 1
            fi
            if
              git ls-remote --exit-code \
              --heads https://github.com/ihmeuw/vivarium.git ${branch_name_to_check} == "0"
            then
              vivarium_branch_name=${branch_name_to_check}
              echo "Found matching branch: ${vivarium_branch_name}"
              echo "vivarium_branch_name=${branch_name_to_check}" >> $GITHUB_ENV
            else
              branch_name_to_check="$( \
                git show-branch -a \
                | grep '\*' \
                | grep -v `git rev-parse --abbrev-ref HEAD` \
                | head -n1 \
                | sed 's/[^\[]*//' \
                | awk 'match($0, /\[[a-zA-Z0-9\/.-]+\]/) { print substr( $0, RSTART+1, RLENGTH-2 )}' \
                | sed 's/^origin\///' \
              )"
              git checkout ${branch_name_to_check}
              iterations=$((iterations+1))
            fi
          done
          git checkout ${branch_name}
      - name: print environment values
        run: |
          cat $GITHUB_ENV
      - name: Retrieve vivarium branch
        if: env.vivarium_branch_name != 'main'
        run: |
          echo "Cloning upstream branch: ${vivarium_branch_name}"
          pushd ..
          git clone --branch=${vivarium_branch_name} https://github.com/ihmeuw/vivarium.git
          pushd vivarium
          pip install .
          popd && popd
      - name: Lint
        run: |
          pip install black==22.3.0 isort
          isort . --check --verbose --only-modified --diff
          black . --check --diff
      - name: Test
        run: |
          if "${{ github.event_name == 'schedule' }}"; then
            pytest --runslow ./tests
          else
            pytest ./tests
          fi
      - name: Doc build
        run: |
          make html -C docs/ SPHINXOPTS="-W --keep-going -n"
      - name: Doctest
        run: |
          make doctest -C docs/
      - name: Send mail
        # Notify when cron job fails
        if: (github.event_name == 'schedule' && failure())
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: smtp.gmail.com
          server_port: 465
          # user credentials
          username: ${{ secrets.NOTIFY_EMAIL }}
          password: ${{ secrets.NOTIFY_PASSWORD }}
          # email subject
          subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
          # email body as text
          body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
          # comma-separated string, send email to
          to: uw_ihme_simulationscience@uw.edu
          # from email name
          from: Vivarium Notifications
